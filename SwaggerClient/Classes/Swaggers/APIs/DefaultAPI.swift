//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI: APIBase {
    /**
     - parameter email: (form)  (optional)
     - parameter phone: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter isinvited: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invitationAddPost(email: String? = nil, phone: String? = nil, name: String? = nil, isinvited: Bool? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        invitationAddPostWithRequestBuilder(email: email, phone: phone, name: name, isinvited: isinvited).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /invitation/add
     - add a user in invitation list

     - examples: [{contentType=application/json, example={
  "errormsg" : "errormsg",
  "Result" : "Result"
}}]
     - parameter email: (form)  (optional)
     - parameter phone: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter isinvited: (form)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func invitationAddPostWithRequestBuilder(email: String? = nil, phone: String? = nil, name: String? = nil, isinvited: Bool? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/invitation/add"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "email": email,
            "phone": phone,
            "name": name,
            "isinvited": isinvited
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter email: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter code: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invitationInviteByEmailPost(email: String? = nil, name: String? = nil, code: String? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        invitationInviteByEmailPostWithRequestBuilder(email: email, name: name, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /invitation/invite/by/email
     - send invitation to people by email

     - examples: [{contentType=application/json, example={
  "errormsg" : "errormsg",
  "Result" : "Result"
}}]
     - parameter email: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter code: (form)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func invitationInviteByEmailPostWithRequestBuilder(email: String? = nil, name: String? = nil, code: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/invitation/invite/by/email"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "email": email,
            "name": name,
            "code": code
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter phone: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter code: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invitationInviteByPhonePost(phone: String? = nil, name: String? = nil, code: String? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        invitationInviteByPhonePostWithRequestBuilder(phone: phone, name: name, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /invitation/invite/by/phone
     - send invitation to people by phone

     - examples: [{contentType=application/json, example={
  "errormsg" : "errormsg",
  "Result" : "Result"
}}]
     - parameter phone: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter code: (form)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func invitationInviteByPhonePostWithRequestBuilder(phone: String? = nil, name: String? = nil, code: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/invitation/invite/by/phone"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "phone": phone,
            "name": name,
            "code": code
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter phone: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func redbotSmsRequestCodePost(phone: String? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        redbotSmsRequestCodePostWithRequestBuilder(phone: phone).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /redbot/sms/request/code
     - send sms code to phone

     - examples: [{contentType=application/json, example={
  "errormsg" : "errormsg",
  "Result" : "Result"
}}]
     - parameter phone: (form)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func redbotSmsRequestCodePostWithRequestBuilder(phone: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/redbot/sms/request/code"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "phone": phone
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter phone: (form)  (optional)
     - parameter verifyCode: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func redbotUserLoginPost(phone: String? = nil, verifyCode: String? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        redbotUserLoginPostWithRequestBuilder(phone: phone, verifyCode: verifyCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /redbot/user/login
     - user login

     - examples: [{contentType=application/json, example={
  "errormsg" : "errormsg",
  "Result" : "Result"
}}]
     - parameter phone: (form)  (optional)
     - parameter verifyCode: (form)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func redbotUserLoginPostWithRequestBuilder(phone: String? = nil, verifyCode: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/redbot/user/login"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "phone": phone,
            "verify_code": verifyCode
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter phone: (form)  (optional)
     - parameter inviteCode: (form)  (optional)
     - parameter verifyCode: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func redbotUserRegisterPost(phone: String? = nil, inviteCode: String? = nil, verifyCode: String? = nil, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        redbotUserRegisterPostWithRequestBuilder(phone: phone, inviteCode: inviteCode, verifyCode: verifyCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /redbot/user/register
     - user register

     - examples: [{contentType=application/json, example={
  "errormsg" : "errormsg",
  "Result" : "Result"
}}]
     - parameter phone: (form)  (optional)
     - parameter inviteCode: (form)  (optional)
     - parameter verifyCode: (form)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func redbotUserRegisterPostWithRequestBuilder(phone: String? = nil, inviteCode: String? = nil, verifyCode: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/redbot/user/register"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "phone": phone,
            "invite_code": inviteCode,
            "verify_code": verifyCode
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
